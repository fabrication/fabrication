/** * Copyright (C) 2010 Rafał Szemraj. * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.puremvc.as3.multicore.utilities.fabrication.logging {    import flash.utils.Dictionary;    /**     * Log class is main entry to log api. It holds references to all created loggers     * in application, creates them and manage arbitrary log level for application.     * @author Rafał Szemraj     */    public class Log {        /**         * repository for loggers         */        private static var __loggersRespository:Dictionary = new Dictionary(false);        /**         * Arbitrary log level for application         */        private static var __logLevel:LogLevel = LogLevel.DEBUG;        /**         * Returns logger instance with given name. If logger exisst it is returned otherwsie         * it's being created, added to repository and returned         * @param ( default = null ) loggerName name of the logger         * @return Logger instance         */        public static function getLogger(loggerName:String = null):Logger        {            loggerName = loggerName ? loggerName : "LOG";            var logger:Logger;            if (__loggersRespository[ loggerName ]) {                return logger = __loggersRespository[ loggerName ] as Logger;            }            logger = new Logger(loggerName);            __loggersRespository[ loggerName ] = logger;            return logger;        }        /**         * Sets arbitrary log level for application         * @param logLevel logLevel instance         * @see LogLevel         */        public static function setLogLevel(logLevel:LogLevel):void        {            __logLevel = logLevel;        }        /**         * Returns arbitrary log level for application         * @return LogLevel instance         */        public static function getLogLevel():LogLevel        {            return __logLevel;        }        private static function log(message:*, messageLogLevel:LogLevel, loggingObject:*):void        {            getLogger().log(message, messageLogLevel, loggingObject);        }        public static function timeStamp():void        {            getLogger().timeStamp();        }        /**         * Logs message with DEBUG log level using default, global Logger instance.         * @param message messafge to log         * @param loggingObject source of message. If omitted name of logger will be used <strong>[ optional ]</strong>         * @see LogLevel         */        public static function debug(message:*, loggingObject:* = null):void        {            log(message, LogLevel.DEBUG, loggingObject);        }        /**         * Logs message with INFO log level using default, global Logger instance.         * @param message messafge to log         * @param loggingObject source of message. If omitted name of logger will be used <strong>[ optional ]</strong>         * @see LogLevel         */        public static function info(message:*, loggingObject:* = null):void        {            log(message, LogLevel.INFO, loggingObject);        }        /**         * Logs message with WARN log level using default, global Logger instance.         * @param message messafge to log         * @param loggingObject source of message. If omitted name of logger will be used <strong>[ optional ]</strong>         * @see LogLevel         */        public static function warn(message:*, loggingObject:* = null):void        {            log(message, LogLevel.WARN, loggingObject);        }        /**         * Logs message with ERROR log level using default, global Logger instance.         * @param message messafge to log         * @param loggingObject source of message. If omitted name of logger will be used <strong>[ optional ]</strong>         * @see LogLevel         */        public static function error(message:*, loggingObject:* = null):void        {            log(message, LogLevel.ERROR, loggingObject);        }        /**         * Logs message with FATAL log level using default, global Logger instance.         * @param message messafge to log         * @param loggingObject source of message. If omitted name of logger will be used <strong>[ optional ]</strong>         * @see LogLevel         */        public static function fatal(message:*, loggingObject:* = null):void        {            log(message, LogLevel.FATAL, loggingObject);        }        /**         * Inspects object ( eg. shows its structure in tree, datagrid etc ). How this method works         * depends on log channel inspectObject method implementation. <b>Important</b> - remember, it shows only dynamic         * properties of object. To show whole information use as3 flash.utils.describeType.         * @param object object to inspect         * @param objectName name of object. You can pass any string that distinguish current object from others,         * if ommit "object" is set. <strong>[ optional ]</strong>         * @see ILogChannel         */        public static function inspectObject(object:*, objectName:String = "object"):void        {            getLogger().inspectObject(object, objectName);        }    }}