/** * Copyright (C) 2010 Rafa≈Ç Szemraj. * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.puremvc.as3.multicore.utilities.fabrication.logging {    /**     * LogLevel class holds info about log leve hierarchy in logging api. Each logged message     * is logged at particulary level wich improve filtering abilities and so on.     */    public class LogLevel {        private var _level:uint;        private var _name:String;        /**         * DEFAULT log level ( same as DEBUG )         */        public static const DEFAULT:LogLevel = new LogLevel(50, "DEBUG");        /**         * DEBUG log level         */        public static const DEBUG:LogLevel = new LogLevel(50, "DEBUG");        /**         * INFO log level         */        public static const INFO:LogLevel = new LogLevel(40, "INFO");        /**         * WARN log level         */        public static const WARN:LogLevel = new LogLevel(30, "WARN");        /**         * ERROR log level         */        public static const ERROR:LogLevel = new LogLevel(20, "ERROR");        /**         * FATAL log level         */        public static const FATAL:LogLevel = new LogLevel(10, "FATAL");        /**         * NONE log level ( logging is blocked )         */        public static const NONE:LogLevel = new LogLevel(0, "NONE");        /**         * Creates LogLevel instance for given levelName         * @param levelName String         * @return LogLevel instance         */        public static function fromLogLevelName(levelName:String):LogLevel        {            levelName = levelName.toUpperCase();            var logLevel:LogLevel;            switch (levelName) {                case LogLevel.INFO.getName() :                    logLevel = LogLevel.INFO;                    break;                case LogLevel.DEBUG.getName() :                    logLevel = LogLevel.DEBUG;                    break;                case LogLevel.WARN.getName() :                    logLevel = LogLevel.WARN;                    break;                case LogLevel.ERROR.getName() :                    logLevel = LogLevel.ERROR;                    break;                case LogLevel.FATAL.getName() :                    logLevel = LogLevel.FATAL;                    break;                default:                    logLevel = LogLevel.DEFAULT;            }            return logLevel;        }        public function LogLevel(level:uint = 50, name:String = "DEBUG")        {            _level = level;            _name = name;        }        /**         * Compares current log level with another one         * @param logLevel another logLevel instance         * @return <strong>true</strong> if passed in logLevel is higher in log hierarchy,         * otherwise returns <strong>false</strong>         */        public function isGreaterOrEqual(logLevel:LogLevel):Boolean        {            return _level >= logLevel._level;        }        /**         * Returns value of logLevel         * @return value of logLevel         */        public function getValue():uint        {            return _level;        }        /**         * Returns name of logLevel         * @return name of logLevel         */        public function getName():String        {            return _name;        }    }}