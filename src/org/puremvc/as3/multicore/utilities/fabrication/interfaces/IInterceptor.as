/** * Copyright (C) 2008 Darshan Sawardekar. * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.puremvc.as3.multicore.utilities.fabrication.interfaces {	import org.puremvc.as3.multicore.interfaces.INotification;	import org.puremvc.as3.multicore.interfaces.INotifier;	import org.puremvc.as3.multicore.utilities.fabrication.patterns.interceptor.NotificationProcessor;	
	/**	 * IInterceptor is the contract for objects that can intercept PureMVC notifications	 * enroute before they reach commands ands mediators. Interceptors implement the	 * INotifier interface and can perform any action that can be performed in commands	 * and mediators.	 * 	 * Interceptors allow you to relocate boundary conditions within your applications	 * notification flow into a separate object. As a result the normal notification	 * interests and flow is less cluttered.	 * 	 * Some of the things Interceptors can be used for,	 * 	 * <ol>	 * 	<li>Interceptors can drop notifications based on certain system criteria.</li>	 * 	<li>Drop the trapped notifications altogether</li>	 * 	<li>Alter the payload of the trapped notification before it reaches the rest of the system.</li>	 * 	<li>Sends a different notification in place of the notification that was originally trapped.</li>	 * 	<li>Send additional notifications before or after the original notification.</li> 	 * </ol>     	 * 	 * @author Darshan Sawardekar	 */	public interface IInterceptor extends INotifier, IDisposable {		/**		 * The notification object to intercept.		 */		function get notification():INotification;		/**		 * @private		 */		function set notification(notification:INotification):void;		/**		 * The notification processor associated with this interceptor.		 */		function get processor():NotificationProcessor;		/**		 * @private		 */		function set processor(processor:NotificationProcessor):void;				/**		 * Optional parameters to allow configuration of the interceptor at the time of		 * registration.		 */		function get parameters():Object;				/**		 * @private		 */		function set parameters(parameters:Object):void;		/**		 * Traps the PureMVC notification within this interceptor. Concrete implementations		 * must call proceed, skip or abort to allow the notification to be processed. The		 * notification specfied will not be forwarded to the rest of PureMVC system until		 * any one these actions have been executed.		 */		function intercept():void		/**		 * Allows the notification to continue to the rest of the PureMVC system actors.		 * If notification is not specified the notification object set on this 		 * interceptor is used. This is a convenience method. 		 */		function proceed(note:INotification = null):void;		/**		 * Aborts the current notification from proceeding to the PureMVC system actors.		 * The notification does not need to be specified. This is a convenience method		 * aliased to processor.abort.		 */		function abort():void;		/**		 * Skips the current notification from proceeding to the PureMVC system actors.		 * Interceptors can wait for different conditions before allowing the notification 		 * to go through. Calling this method indicates that the interceptor need not 		 * wait anymore and should be disposed.		 */		function skip():void;	}}