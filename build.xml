<?xml version="1.0"?>
<project name="fabrication" default="main">
	
	<!-- load user properties -->
	<property file="user.properties" />
	
	<!-- load standard build properties -->
	<property file="build.properties" />
	
	<!-- import common build -->
	<dirname property="fabrication.dirname" file="${ant.file.fabrication}" />
	<import file="${fabrication.dirname}/common.xml" />
	
	<!-- Default paths to the unit test runner -->
	<property name="test.runner.src" value="FabricationTestRunner.mxml" />
	<property name="test.runner.swf" value="${bin}/fabrication_test_runner.swf" />
	<property name="test.runner.width" value="950" />
	<property name="test.runner.height" value="600" />
	
	<!-- fileset refers to the component resolver layout test mxml modules -->
	<fileset id="resolver.layouts.fileset" dir="${resolver.layouts.dir}">
		<include name="*.mxml" />
	</fileset>

	<target name="clean" description="Removes all build generated files" depends="clean-coverage">
		<delete dir="${build.dir}" />
		<delete dir="${dist}" failonerror="no" />
		<mkdir dir="${build.dir}" />
	</target>
	
	<target name="clean-coverage" description="Removes all files generated by flexcover">
		<delete>
			<fileset dir="${bin}">
				<include name="**/*.cvm" />
				<include name="**/*.cvr" />
			</fileset>
		</delete>
		<delete dir="${bin}/coverage-report" failonerror="no"/>
	</target>
	
	<target name="dist" description="Builds swcs and zip for distribution"
		depends="swc, zip">
	</target>
	
	<target name="swc" description="Compiles the fabrication swc for multiple platforms"
		depends="swc-flex, swc-flash, swc-air">
	</target>
	
	<target name="swc-flex" description="Compiles the fabrication swc for flex"
		if="fabrication.flex.swc">
		<flex-comp output="${fabrication.flex.swc}">
			<fileset dir="${src.main.flash}">
				<include name="**/*.mxml" />
				<include name="**/*.as" />
				<exclude name="**/*Air*" />
			</fileset>
		</flex-comp>
	</target>
		
	<target name="swc-flash" description="Compiles the fabrication swc for flash"
		if="fabrication.flash.swc">
		<flex-comp output="${fabrication.flash.swc}">
			<fileset dir="${src.main.flash}">
				<include name="**/*.as" />
				<exclude name="**/*.mxml" />
				<exclude name="**/*Air*" />
				<exclude name="**/*Flex*" />
			</fileset>
		</flex-comp>
	</target>
		
	<target name="swc-air" description="Compiles the fabrication swc for air"
		if="fabrication.air.swc">
		<flex-comp output="${fabrication.air.swc}">
			<fileset dir="${src.main.flash}">
				<include name="**/*.mxml" />
				<include name="**/*.as" />
			</fileset>
		</flex-comp>
	</target>
	
	<target name="build" description="Builds runner, modules and resolver layouts"
		depends="build-test-runner, build-modules, build-layout-modules">
	</target>
	
	<target name="build-test-runner" description="Compiles the fabrication test runner"
		if="runner.rebuild">
		<test-flex-app 
			mainclass="${test.runner.src}"
			output="${test.runner.swf}"
			width="${test.runner.width}"
			height="${test.runner.height}"
		/>
	</target>
	
	<target name="build-modules" description="Compiles the modules used in the unit tests"
		if="runner.modules.rebuild">
		<test-flex-module 
			mainclass="${empty.flex.module.src}"
			output="${empty.flex.module.output}"
			optimize-for="${test.runner.src}"
		/>
	</target>
	
	<target name="build-layout-modules" 
		description="Compiles all the resolver layout modules"
		if="resolver.layouts.rebuild">
		<!-- Copies the modules template to a local buffer -->
		<xmltask source="${resolver.modules.xml.template}">
			<copy path="/" buffer="modules.xmlroot" />
		</xmltask>
		
		<!-- Adds each resolver module layout to the modules xml buffer -->
		<for param="file">
			<path>
				<fileset refid="resolver.layouts.fileset" />
			</path>
			<sequential>
				<!-- inserts the module element into the modules xml buffer -->
				<to-snakecase variable="file_name" input="@{file}"/>
				<var name="file.output.swf" value="${file_name}.swf" />
				<xmltask sourcebuffer="modules.xmlroot" destbuffer="modules.xmlroot">
					<insert path="/modules">
						<![CDATA[
							<module path="${file.output.swf}" />
						]]>
					</insert>
				</xmltask>				
			</sequential>
		</for>
		
		<!-- Writes the modules buffer to disk -->
		<xmltask sourcebuffer="modules.xmlroot" dest="${resolver.modules.xml}" />
		
		<test-flex-modules outputDir="${resolver.layouts.output.dir}" optimize-for="${test.runner.src}">
			<fileset refid="resolver.layouts.fileset" />
		</test-flex-modules>
	</target>
	
	<target name="test" description="Builds test runner, modules, and launches the runner"
		depends="build, run">
	</target>
	
	<target name="test-layout-module" description="Builds the module specified by layout.module.src and launches the runner">
		<var name="layout.module.src.file" value="${resolver.layouts.dir}/${layout.module.src}" />
		<to-snakecase variable="file_name" input="${layout.module.src}"/>
		<var name="layout.module.output" value="${resolver.layouts.output.dir}/${file_name}.swf" />
		
		<test-flex-module 
			mainclass="${layout.module.src.file}"
			output="${layout.module.output}"
			optimize-for="${test.runner.src}"
		/>
		
		<antcall target="build-test-runner" />
		<antcall target="run" />
	</target>
	
	<target name="run" description="Launches the test runner">
		<launch-flex-app file="${test.runner.swf}"/>
	</target>
	
	<target name="asdoc" description="Generates asdocs">
		<asdoc 
			window-title="${asdoc.window-title}" 
			destdir="${doc.asdoc}">
			<fileset dir="${src.main.flash}">
				<include name="**/*.as" />
				<include name="**/*.mxml" />
			</fileset>
		</asdoc>
	</target>
	
	<target name="publish-asdoc" description="Publishes asdocs to the svn">
		<svn username="${svn.username}" password="${svn.password}">
			<revert dir="${doc.asdoc}" recurse="yes" />
			<delete dir="${doc.asdoc}" />
			<commit dir="${doc.asdoc}" message="Removed old asdocs."/>
		</svn>
		<delete dir="${doc.asdoc}" failonerror="no" />
		<antcall target="asdoc" />
		<svn username="${svn.username}" password="${svn.password}">
			<add dir="${doc.asdoc}" recurse="yes" />
		</svn>
		<set-mimetypes>
			<fileset dir="${doc.asdoc}">
				<include name="**/*.*" />
			</fileset>
		</set-mimetypes>
		<svn username="${svn.username}" password="${svn.password}">
			<commit dir="${doc.asdoc}" message="Added updated asdocs." />
		</svn>
	</target>
	
	<target name="zip" description="Generates a zip file from the trunk">
		<delete file="${fabrication.source.zip}" failonerror="no"/>
		<zip destfile="${fabrication.source.zip}">
			<fileset dir="${basedir}">
				<include name="src/**" />
				<include name="bin/**" />
				<include name="libs/**" />
				<include name="etc/**" />
				<include name="*.xml" />
				<include name="COPYING" />
				<include name="**/*_license.txt" />
				<include name="build.properties" />
			</fileset>
			<fileset dir="${basedir}">
				<include name="bin/fabrication-${fabrication.version}.swc"/>
			</fileset>
		</zip>
	</target>
	
	<target name="publish-to-googlecode" description="Publishes the current source to the google code downloads">
		<publish-file-to-googlecode 
			file="${fabrication.flex.swc}"
			summary="Fabrication ${fabrication.version} swc for Flex"
		/>
		<publish-file-to-googlecode 
			file="${fabrication.air.swc}"
			summary="Fabrication ${fabrication.version} swc for AIR"
		/>
		<!--
		<publish-file-to-googlecode 
			file="${fabrication.flash.swc}"
			summary="Fabrication ${fabrication.version} swc for Flash"
		/>
		-->
		<publish-file-to-googlecode 
			file="${fabrication.source.zip}"
			summary="Fabrication ${fabrication.version} Source Zip"
		/>
	</target>
	
	<!-- Required scaffolding properties -->
	<property name="project.dir" value="" />
	<property name="project.name" value="" />
	<property name="project.mainclass" value="" />
	<property name="project.output" value="" />
	<property name="project.output.width" value="550" />
	<property name="project.output.height" value="400" />
	<property name="scaffold.overwrite" value="no" />
	
	<target name="scaffold-build"
		description="Generates the ant build for a project">
		<scaffold-build 
			project-dir="${project.dir}"
			project-name="${project.name}"
			project-mainclass="${project.mainclass}"
			project-output="${project.output}"
			project-output-width="${project.output.width}" 
			project-output-height="${project.output.height}"
			overwrite="${scaffold.overwrite}"
		/>
	</target>
	
	<target name="upgrade-app"
		description="Freezes the current fabrication swc into a project">
		<upgrade-app app-dir="${project.dir}" />
	</target>
	
	<target name="all" depends="clean, build, test, asdoc, run" 
		description="Removes previous compiled files and rebuilds the main application and generates asdocs">
	</target>
	
	<target name="main" depends="test, run" 
		description="Default target, build">
	</target>
	
</project>